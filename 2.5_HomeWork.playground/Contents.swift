import UIKit

//4. –ù–∞–ø–∏—à–∏—Ç–µ, –¥–ª—è —á–µ–≥–æ –Ω—É–∂–Ω—ã –¥–∂–µ–Ω–µ—Ä–∏–∫–∏.
//–î–∂–µ–Ω–µ—Ä–∏–∫–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª—é–±—ã–º —Ç–∏–ø–æ–º.

//5. –£–∫–∞–∂–∏—Ç–µ, —á–µ–º –∞—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤.
//–ê—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞—Ö, –∏ —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ associatedtype
//–∞ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è —á–µ–º?
//–æ—Ç–ª–∏—á–∞—é—Ç—Å—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π, –∞ —Ç–∞–∫ —á—Ç–æ —Å –ø–æ–º–æ—â—å—é –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤ —á—Ç–æ —Å –ø–æ–º–æ—â—å—é –∞—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–æ–∂–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤ —Å–µ–±—è –ª—é–±–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö

//6. –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è:
//a) –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –¥–≤–∞ Equatable-–æ–±—ä–µ–∫—Ç–∞ –∏, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —Ä–∞–≤–Ω—ã –ª–∏ –æ–Ω–∏ –¥—Ä—É–≥ –¥—Ä—É–≥—É, –≤—ã–≤–æ–¥–∏—Ç —Ä–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥;
func equatable<T: Equatable>(_ a: T, _ b: T){
    if a == b {
        print("–ü–∞—Ä–∞–º–µ—Ç—Ä–∞ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã")
    } else {
       print("–ü–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–µ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã")
    }
}

let oneValueEq = 5
let twoValueEq = 5
equatable(oneValueEq, twoValueEq)


//b) –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –¥–≤–∞ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º—ã—Ö (Comparable) –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º –∑–Ω–∞—á–µ–Ω–∏—è, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∏—Ö –∏ –≤—ã–≤–æ–¥–∏—Ç –≤ –ª–æ–≥ –Ω–∞–∏–±–æ–ª—å—à–µ–µ;
func comparable<T: Comparable>(_ a: T, _ b: T){
    if a == b {
        print("–ü–∞—Ä–∞–º–µ—Ç—Ä–∞ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã")
    } else if a > b {
        print("–ù–∞–∏–±–æ–ª—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ \(a)")
    } else {
        print("–ù–∞–∏–±–æ–ª—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ \(b)")
    }
}

let oneValueComp = 25.3
let twoValueComp = 32.6
comparable(oneValueComp, twoValueComp)
//–≠—Ç–æ —á—Ç–æ?
//–ò—Å–ø—Ä–∞–≤–∏–ª ))

//c) –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –¥–≤–∞ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º—ã—Ö (Comparable) –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º –∑–Ω–∞—á–µ–Ω–∏—è, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∏—Ö –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –º–µ–Ω—å—à–∏–º –∏–∑ –¥–≤—É—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –∞ –≤—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä ‚Äî –±–æ–ª—å—à–∏–º;
func changeComparable<T: Comparable>(_ a: inout T, _ b: inout T){
    
    if a == b {
        print("–ü–∞—Ä–∞–º–µ—Ç—Ä–∞ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã")
    } else if a > b {
        var temp : T
        temp = a
        a = b
        b = temp
        print("–ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä = \(a), –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä = \(b)")
    } else {
        print("–ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä = \(a), –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä = \(b)")
    }
}

var oneValueCh = 365//"bbb"
var twoValueCh = 10//"aaa"
changeComparable(&oneValueCh, &twoValueCh)
//–ò—Å–ø—Ä–∞–≤–∏–ª ))

//d) –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –¥–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç –¥–∂–µ–Ω–µ—Ä–∏–∫ ‚Äî –≤—Ö–æ–¥–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¢ –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç; —Å–∞–º–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ –≤—Ö–æ–¥ –ø–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä —Å —Ç–∏–ø–æ–º –¢ –∏ –ø—Ä–∏ —Å–≤–æ—ë–º –≤—ã–∑–æ–≤–µ –≤—ã–∑—ã–≤–∞–µ—Ç –¥–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–µ—Ä–µ–¥–∞—ë—Ç –≤ –Ω–∏—Ö –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–ø–æ —Ñ–∞–∫—Ç—É –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏).

func main<T>(func1: (T) -> Void, func2: (T) -> Void, value: T) -> ((T) -> Void) {
  
    func threeFunc(_ a: T) -> ((T) -> Void)  {
        func1(a)
        func2(a)
        return {_ in }
    }
    
    return threeFunc(value)
}

func oneFunc<T>(_ a: T){
    print("–í—ã–∑–æ–≤ –ø–µ—Ä–≤–æ–π \(a)")
}

func twoFunc<T>(_ a: T){
    print("–í—ã–∑–æ–≤ –≤—Ç–æ—Ä–æ–π \(a)")
}


main(func1: oneFunc, func2: twoFunc, value: "—Ñ—É–Ω–∫—Ü–∏–∏")
main(func1: oneFunc, func2: twoFunc, value: 123)
//–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è.
//–ß—Ç–æ-—Ç–æ –≤—Å—é –≥–æ–ª–æ–≤—É —Å–ª–æ–º–∞–ª —Å —ç—Ç–∏–º –∑–∞–¥–∞–Ω–∏–µ–º )) —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª —Ç–∞–∫, –Ω–æ —è –¥—É–º–∞—é –Ω–µ –≤–µ—Ä–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
//—Ö–æ—Ç–µ–ª —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–µ–∑ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ threeFunc, –∞ —Å—Ä–∞–∑—É —É–∫–∞–∑–∞—Ç—å return {_ in func1(value), func2(value)}, –Ω–æ —Ç–∞–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É

//7. –°–æ–∑–¥–∞–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è:

//      a) Array, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–º–µ—é—Ç —Ç–∏–ø Comparable, –∏ –¥–æ–±–∞–≤—å—Ç–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç;
extension Array where Element: Comparable {
    func maximum() -> Element {
        var max = self[0]
        for i in self {
            if max < i {max = i}
        }
        return max
    }
}
let array = [5, 65, 23, 7]
//–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è max.
//–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π maximum.
//–ò—Å–ø—Ä–∞–≤–∏–ª, –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ñ—É–Ω–∫—Ü–∏—é –æ–±–æ–∑–≤–∞–ª max –∏ –ø–æ—Ç–æ–º –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∑–∞–±—ã–ª –∏—Å–ø—Ä–∞–≤–∏—Ç—å
array.maximum()

//–ß—Ç–æ –±—É–¥–µ—Ç?
let ints: [Int] = []
ints.maximum
//—Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω–µ—Ç –ø–µ—Ä–≤—ã–π [0] —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞, —Ç–∞–∫ –∫–∞–∫ –º–∞—Å—Å–∏–≤ –æ–±—ä—è–≤–ª–µ–Ω –ø—É—Å—Ç—ã–º —Ç–æ –Ω–∏ —á–µ–≥–æ –Ω–µ –≤–µ—Ä–Ω–µ—Ç—Å—è

//      b) Array, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–º–µ—é—Ç —Ç–∏–ø Equatable, –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —É–¥–∞–ª—è–µ—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.
extension Array where Element: Equatable {
    func unique() -> Array {
        return reduce(into: []) { result, element in
            if !result.contains(element) {
                result.append(element)
            }
        }
    }
}
var arrayTwo = [5, 65, 23, 5, 7, 23, 65, 23, 7]
arrayTwo.unique()

//–ï—Å–ª–∏ Element: Hashable, —Ç–æ –∫–∞–∫–∞—è –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è?
//–ü—Ä–æ—Ç–æ–∫–æ–ª Hashable —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª Equatable, –ø–æ—ç—Ç–æ–º—É –≤—Å–µ —á—Ç–æ –ø—Ä–∏–º–µ–Ω–∏–º–æ –∫ Equatable –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–∏–º–æ –∏ –∫ Hashable
//–î—Ä—É–≥–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ü–∏–∫–ª–∞, —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –≤ –∫–æ—Ç–æ—Ä—ã–π –≤ —Ü–∏–∫–ª–µ —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –ø—É—Ç–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞

// 8. –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –¥–ª—è:

//      a) –≤–æ–∑–≤–µ–¥–µ–Ω–∏—è Int-—á–∏—Å–ª–∞ –≤ —Å—Ç–µ–ø–µ–Ω—å: –æ–ø–µ—Ä–∞—Ç–æ—Ä ^^, —Ä–∞–±–æ—Ç–∞–µ—Ç 2^3, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 8;
infix operator ^^
func ^^(value: Double, exp: Int) -> Double {
    var valueExp = value
    for _ in 1...abs(exp)-1{
        valueExp *= value
    }
    if exp < 0{
        return 1/valueExp
    } else {
        return valueExp
    }
}
2^^3
5^^4
2 ^^ -5
3 ^^ -6

//      b) –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ –≤—Ç–æ—Ä–æ–µ Int-—á–∏—Å–ª–∞ —É–¥–≤–æ–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ 4 ~> a, –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ a = 8;
infix operator ~>
func ~>(value: Int, double: inout Int){
    double = value * 2
}
var a = 0
4 ~> a
 
//      c) –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è –≤ —ç–∫–∑–µ–º–ø–ª—è—Ä tableView –¥–µ–ª–µ–≥–∞—Ç–∞: myController <* tableView, –ø–æ–ª–µ —ç—Ç–æ–≥–æ myController —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–µ–ª–µ–≥–∞—Ç–æ–º –¥–ª—è tableView;
infix operator <*
func <*(myController: UIViewController, tableView: UITableView){
    tableView.delegate = (myController as? UITableViewDelegate)
}
let myController = UIViewController()
let tableView = UITableView()
myController <* tableView
//–ü–æ—á–µ–º—É –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞? üòè
//–ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞–Ω–∏—è?
//–ò—Å–ø—Ä–∞–≤–∏–ª

//      d) —Å—É–º–º–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–≤—É—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Å —Ç–∏–ø–æ–º CustomStringConvertable –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ: 7 + ‚Äú string‚Äù –≤–µ—Ä–Ω–µ—Ç ‚Äú7 string‚Äù.
struct StructOne<Element>: CustomStringConvertible{
    var element : Element
    var description: String{
        return "\(element)"
    }
}

struct StructTwo<Element>: CustomStringConvertible{
    var element : Element
    var description: String{
        return "\(element)"
    }
}

infix operator +++
func +++(left: CustomStringConvertible, right: CustomStringConvertible) -> String{
    return "\(left)\(right)"
}
let left = StructOne(element: 7)
let right = StructTwo(element: " string")
left +++ right
//–î—É–º–∞—é –∏–º–µ–ª—Å—è –≤–≤–∏–¥—É —Ç–∏–ø CustomStringConvertible
//–Ø –ø—ã—Ç–∞–ª—Å—è –Ω–∞–π—Ç–∏ —Ç–∏–ø –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–Ω –≤ –∑–∞–¥–∞–Ω–∏–∏ CustomStringConvertable, –Ω–µ –Ω–∞—à–µ–ª –∏ —Å–æ–∑–¥–∞–ª —Å–≤–æ–π ))

// 9. –ù–∞–ø–∏—à–∏—Ç–µ –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–π –Ω–æ–≤—ã–π –∞–Ω–∏–º–∞—Ç–æ—Ä:
//      a) –∏–∑–º–µ–Ω—è—é—â–∏–π —Ñ–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç –¥–ª—è UIView;
let view = UIView()

protocol Animator {
    associatedtype MyView
    associatedtype Value
    
    init(_ value: Value)
    
    func animate(myView: MyView)
}

class BackgroundColorAnimator: Animator{
    let newColor : UIColor
    
    required init(_ value: UIColor){
        newColor = value
    }
    
    func animate(myView: UIView){
        UIView.animate(withDuration: 2){
            myView.backgroundColor = self.newColor
        }
    }
}

infix operator -->
func --><T: Animator>(left: T, right: T.MyView){
    left.animate(myView: right)
}

BackgroundColorAnimator(.blue) --> view


//      b) –∏–∑–º–µ–Ω—è—é—â–∏–π center UIView;
class CenterChange: Animator{
    let newCenter : CGPoint
    
    required init(_ value: CGPoint){
        newCenter = value
    }
    
    func animate(myView: UIView){
        UIView.animate(withDuration: 2){
            myView.center = self.newCenter
        }
    }
}

CenterChange(CGPoint(x: 100, y: 100)) --> view

//      c) –¥–µ–ª–∞—é—â–∏–π scale-—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è UIView.
class ScaleView: Animator{
    let newScale : CGFloat
    
    required init(_ value: CGFloat){
        newScale = value
    }
    
    func animate(myView: UIView){
        UIView.animate(withDuration: 2){
            myView.layer.cornerRadius = self.newScale / 2
        }
    }
}

ScaleView(view.frame.width) --> view
